<?php


$ar1 = [10, 100, 100, 0];
$ar2 = [1, 3, 2, 4, [3, 2, 4, 1]];
array_multisort($ar1, SORT_ASC);
array_multisort($ar2, SORT_DESC);
var_dump($ar1);
var_dump($ar2);

// =====================================================================================================================

$arA = [
    ["17", 16, "12", 11, "14", 13, 15, "b", "c", "a", ],
    ["j",  1,   "2", "f", 3,   "c", 1, "b", "a", "b", ]
];

array_multisort($arA[0], SORT_ASC, SORT_STRING,
    $arA[1], SORT_NUMERIC, SORT_DESC);

// array_multisort - Сортирует только первый массив по ключам переданным в качестве аргументов.
// Затем PHP отыщет в качестве 4-его аргумента массив который уже будет выстроен в соответствии с первым
// Поэтому его размер должен быть таким же как и первый.
// Как в принципе и все следующие массивы которые будут переданы.
var_dump($arA);

// =====================================================================================================================

$arB = [
    ["77", "77", "77", "77", "77", "77", "77", "77", "77", "77", ],
    ["j",   1,   "2",  "f",   3,   "c",   1,   "b",   "a", "b", ]
];

array_multisort($arB[0], SORT_ASC, SORT_STRING,
    $arB[1], SORT_NUMERIC, SORT_DESC);

var_dump($arB);

// =====================================================================================================================

$arB = [
    ["77", "77", "77", "77", "77", "77", "77", "77", "77", "77", ],
    ["j",   1,   "2",  "f",   3,   "c",   1,   "b",   "a", "b", ]
];

array_multisort($arB[0], SORT_ASC, SORT_STRING,
    $arB[1], SORT_NUMERIC, SORT_ASC);

var_dump($arB);
